package dev.codecounty.java.java8.core.collections.custom_sorting;

import java.util.Arrays;
import java.util.HashMap;
import java.util.PriorityQueue;

public class PriorityQueueQuestion {
	public static int[] topK(int[] nums, int k) {

		HashMap<Integer, Integer> freq = new HashMap<>();


		for (int i : nums) {
			freq.put(i, freq.getOrDefault(i, 0) + 1);
		}

		System.out.println(freq);

		PriorityQueue<Integer[]> pq = new PriorityQueue<>((a, b) -> {
			// Integer temp = (b[1]-a[1]);
			if ((a[1] == b[1]))
				return a[0] - b[0];
			else
				return b[1] - a[1];
		});

//		if (s1.age == s2.age)
//			return 0;
//		else if (s1.age > s2.age)
//			return 1;
//		else
//			return -1;

		freq.forEach((key, val) -> {
			Integer[] temp = { key, val };
			pq.add(temp);
		});

		System.out.println(pq);

		int[] res = new int[k];
		for (int i = 0; i < k; i++) {
			if (!pq.isEmpty()) {
				Integer[] front = pq.remove();
				res[i] = front[0];
			} else
				break;
		}
		return res;

	}

	public static void main(String[] args) {
		int arr[] = { 3, 1, 4, 4, 5, 2, 6, 1 };
		int n = arr.length;
		int k = 2;

		int samples = 891;
		int k_ = 3;
		String[] sammpelString = "3 76 3 28 50 28 28 28 76 3 50 3 76 76 50 3 28 50 76 28 76 76 3 28 3 50 3 3 50 50 50 28 3 76 50 76 50 3 50 76 50 50 3 28 28 50 28 50 50 3 50 3 28 50 50 28 50 76 3 3 76 50 28 50 50 28 3 28 28 28 3 28 50 50 76 76 50 50 50 28 3 3 76 50 50 28 76 50 28 50 76 76 28 50 28 3 50 50 3 50 28 50 50 50 50 28 50 50 28 50 3 28 28 28 28 50 28 76 50 50 76 28 28 50 28 50 76 50 50 50 28 28 28 50 76 50 28 28 50 50 76 50 50 3 28 28 76 28 50 50 50 3 50 50 50 28 50 28 3 76 50 50 28 3 28 3 50 28 76 50 50 28 76 28 3 3 50 28 28 50 3 28 28 76 50 28 50 76 28 50 50 3 28 3 3 3 50 28 50 76 50 28 28 50 76 76 3 50 3 50 76 3 50 28 3 50 50 28 3 28 50 50 50 50 28 28 50 3 76 3 76 50 50 50 3 28 50 28 76 3 3 76 76 28 50 28 50 28 3 3 76 28 50 28 76 50 76 76 50 28 50 50 3 3 28 28 28 28 28 50 50 50 28 50 28 28 76 76 28 28 12 28 50 50 3 28 76 76 28 28 76 3 28 28 76 76 76 50 50 28 50 50 28 50 50 50 50 3 76 28 28 76 3 76 76 76 28 50 28 3 28 50 50 50 50 76 76 3 3 28 76 50 3 76 50 50 76 28 50 28 50 28 50 50 28 50 28 50 50 50 28 28 28 50 28 50 50 28 28 76 3 76 28 50 28 28 28 50 28 76 76 3 50 28 50 50 28 3 3 50 28 28 50 28 50 76 50 76 3 76 50 50 28 76 50 50 3 50 50 50 28 50 50 50 50 28 28 28 76 50 50 28 50 50 50 28 28 28 76 28 28 50 50 3 76 50 50 28 28 28 76 50 76 50 28 3 50 50 28 3 28 50 3 3 3 28 50 50 50 76 50 50 3 50 50 50 3 76 28 28 50 50 28 3 50 12 3 28 3 76 50 76 50 28 50 28 3 3 28 76 76 28 28 28 3 3 3 50 76 76 50 50 28 50 76 50 50 50 3 50 50 76 50 50 50 28 28 50 50 28 50 28 28 12 28 76 28 28 28 28 76 50 28 50 50 50 50 76 50 3 28 50 76 28 3 3 50 50 76 3 28 76 28 50 28 50 50 50 28 28 3 50 3 50 76 3 28 28 76 50 50 50 76 3 28 28 28 28 12 50 76 28 28 50 3 50 28 28 50 3 50 50 50 3 28 12 28 28 50 28 28 50 50 50 50 50 3 50 50 12 3 76 50 50 76 28 50 12 50 28 28 76 50 50 50 28 3 3 3 76 50 28 28 50 50 76 50 50 50 50 76 50 50 50 3 3 76 28 28 50 3 28 50 28 50 50 50 28 76 3 3 50 50 3 50 50 50 50 50 50 76 76 28 50 3 28 50 50 28 50 50 50 50 76 50 50 3 50 3 50 50 50 3 50 50 28 50 50 28 50 50 50 28 50 28 3 50 50 76 50 76 3 28 50 28 50 50 28 76 3 50 28 28 76 50 3 50 76 50 28 50 28 50 3 28 50 50 50 28 3 76 3 50 3 50 50 28 76 50 28 50 50 50 28 50 76 76 50 50 28 28 76 50 28 50 50 50 3 28 28 50 50 3 50 50 28 50 50 3 50 50 76 50 28 50 76 50 50 50 28 28 28 50 50 3 28 3 3 28 76 28 28 50 50 50 3 50 50 28 28 50 28 50 50 76 50 50 3 28 76 76 28 3 28 28 50 28 28 50 76 50 28 3 28 76 28 28 76 12 3 50 50 3 50 50 28 50 50 28 28 50 3 28 3 76 50 28 50 28 28 50 28 50 28 76 50 3 28 50 28 50 28 50 76 76 28 3 50 28 28 76 50 76 28 28 28 28 50 50 76 28 3 50 76 28 3 50 50 50 50 76"
				.split(" ");

		int[] arrayOfInt = new int[samples];
		int i = 0;
		for (String samString : sammpelString) {
			arrayOfInt[i++] = Integer.parseInt(samString);
		}

		// Function call
		int[] topK = topK(arrayOfInt, k_);
		System.out.println(Arrays.toString(topK));
	}
}
